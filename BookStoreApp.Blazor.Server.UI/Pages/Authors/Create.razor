@page "/authors/create/"
@inject IAuthorService authorService
@inject NavigationManager navManager
@attribute [Authorize(Roles = Roles.Administrator)]

<h3>Create New Author</h3>

<EditForm Model="Author" OnValidSubmit="HandleCreateAuthor">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="firstname">First Name</label>
        <InputText id="firstname" class="form-control" @bind-Value="Author.FirstName" />
        <ValidationMessage For="@(() => Author.FirstName)" />
    </div>
    <br />
    <div class="form-group">
        <label for="lastname">Last Name</label>
        <InputText id="lastname" class="form-control" @bind-Value="Author.LastName" />
        <ValidationMessage For="@(() => Author.LastName)" />
    </div>
    <br />
    <div class="form-group">
        <label for="bio">Biograph</label>
        <InputText id="bio" class="form-control" @bind-Value="Author.Bio" />
        <ValidationMessage For="@(() => Author.Bio)" />
    </div>
    <br />
    <button class="btn btn-primary" type="submit">
        <span class="oi oi-pencil"></span>
        Create Author
    </button>
    <button @onclick="BackToList" class="btn btn-outline-secondary">
        <span class="oi oi-media-skip-backward"></span>
        Back To List
    </button>
</EditForm>

@code {
    private AuthorCreateDto Author = new AuthorCreateDto();

    private async Task HandleCreateAuthor() {
        var response = await authorService.Create(Author);
        if (response.Success) {
            BackToList();
        }
    }

    private void BackToList() {
        navManager.NavigateTo("/authors/");
    }
}
